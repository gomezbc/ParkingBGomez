plugins {
    alias(libs.plugins.androidApplication)
    id "org.sonarqube" version "5.0.0.4638"
    alias(libs.plugins.googleGmsGoogleServices)
    alias(libs.plugins.googleAndroidLibrariesMapsplatformSecretsGradlePlugin)
    alias(libs.plugins.jetbrainsKotlinAndroid)
    id 'androidx.navigation.safeargs'
    id 'jacoco'
}

sonar {
    properties {
        property "sonar.projectKey", "gomezbc_ParkingBGomez_59f23139-bdb3-486b-bf31-22b7e57e6af4"
        property "sonar.projectName", "ParkingBGomez"
        property "sonar.junit.reportPaths", "build/reports/test-results"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.androidLint.reportPaths", "build/reports/lint-results.xml"
    }
}

android {
    namespace 'com.lksnext.ParkingBGomez'
    compileSdk 34

    defaultConfig {
        applicationId "com.lksnext.ParkingBGomez"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        debug {
            debuggable true
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests.returnDefaultValues = true
    }

}



tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

tasks.register("jacocoTestReport", JacocoReport) {
    dependsOn = ['testDebugUnitTest']

    reports {
        xml.required.set(true)
        xml.outputLocation.set(file("$project.layout.buildDirectory/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"))
        html.required.set(true)
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

    def debugTree = fileTree(dir: "$project.layout.buildDirectory/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    additionalSourceDirs.from = files(mainSrc)
    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(files("$project.layout.buildDirectory/jacoco/testDebugeUnitTest.exec"))
}

dependencies {
    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    implementation libs.gridlayout
    implementation libs.firebase.perf
    implementation libs.firebase.analytics
    implementation libs.firebase.firestore
    implementation libs.firebase.auth
    implementation libs.play.services.maps
    implementation libs.play.services.auth
    implementation libs.credentials
    implementation libs.credentials.play.services.auth
    implementation libs.googleid
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android
    implementation libs.core.ktx
    testImplementation libs.junit
    testImplementation libs.mockito.core
    testImplementation libs.core.testing
    testImplementation libs.hamcrest
    androidTestImplementation libs.mockito.android
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    implementation platform(libs.firebase.bom)
    debugImplementation libs.leakcanary.android
    androidTestImplementation libs.core.testing
}

secrets {
    propertiesFileName = "secrets.properties"
    defaultPropertiesFileName = "local.defaults.properties"
    ignoreList.add("keyToIgnore")
    ignoreList.add("sdk.*")
}
